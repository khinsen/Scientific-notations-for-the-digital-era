
@article{hinsen_mosaic_2014,
  title = {{{MOSAIC}}: a data model and file formats for molecular simulations.},
  volume = {54},
  doi = {10.1021/ci400599y},
  abstract = {The MOlecular SimulAtion Interchange Conventions (MOSAIC) consist of a data model for molecular simulations and of concrete implementations of this data model in the form of file formats. MOSAIC is designed as a modular set of specifications, of which the initial version covers molecular structure and configurations. A reference implementation in the Python language facilitates the development of simulation software based on MOSAIC.},
  timestamp = {2016-03-08T17:39:03Z},
  number = {1},
  journal = {Journal of chemical information and modeling},
  author = {Hinsen, Konrad},
  year = {2014},
  pages = {131--137},
  file = {J Chem Inf Model_54_131-137:/Users/hinsen/Zotero/storage/33A6Q7F7/J Chem Inf Model_54_131-137.pdf:application/pdf}
}

@inproceedings{flatt_composable_2002,
  address = {New York, NY, USA},
  series = {ICFP '02},
  title = {Composable and {{Compilable Macros}}:: {{You Want It}} when?},
  isbn = {978-1-58113-487-2},
  shorttitle = {Composable and {{Compilable Macros}}},
  doi = {10.1145/581478.581486},
  abstract = {Many macro systems, especially for Lisp and Scheme, allow macro transformers to perform general computation. Moreover, the language for implementing compile-time macro transformers is usually the same as the language for implementing run-time functions. As a side effect of this sharing, implementations tend to allow the mingling of compile-time values and run-time values, as well as values from separate compilations. Such mingling breaks programming tools that must parse code without executing it. Macro implementors avoid harmful mingling by obeying certain macro-definition protocols and by inserting phase-distinguishing annotations into the code. However, the annotations are fragile, the protocols are not enforced, and programmers can only reason about the result in terms of the compiler's implementation. MzScheme---the language of the PLT Scheme tool suite---addresses the problem through a macro system that separates compilation without sacrificing the expressiveness of macros.},
  timestamp = {2016-04-14T14:11:10Z},
  urldate = {2016-04-14},
  booktitle = {Proceedings of the {{Seventh ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  publisher = {{ACM}},
  author = {Flatt, Matthew},
  year = {2002},
  keywords = {language tower,macros,modules},
  pages = {72--83},
  file = {Flatt - 2002 - Composable and Compilable Macros You Want It whe.pdf:/Users/hinsen/Zotero/storage/ANKMKNV2/Flatt - 2002 - Composable and Compilable Macros You Want It whe.pdf:application/pdf}
}

@techreport{stodden_setting_2013,
  title = {Setting the {{Default}} to {{Reproducible}}},
  timestamp = {2016-04-19T10:54:34Z},
  author = {Stodden, Victoria and Bailey, D. H. and Borwein, J. and LeVeque, R. J. and Rider, W. and Stein, W.},
  month = feb,
  year = {2013},
  keywords = {reproducibility},
  pages = {1--19},
  file = {1-19:/Users/hinsen/Zotero/storage/AFWSNMBH/1-19.pdf:application/pdf}
}

@article{merali_computational_2010,
  title = {Computational science: ...{{Error}}},
  timestamp = {2016-04-27T14:45:31Z},
  number = {467},
  journal = {Nature},
  author = {Merali, Zeeya},
  year = {2010},
  pages = {775--777},
  file = {Nature_467_775-777:/Users/hinsen/Zotero/storage/IA5BR7KS/Nature_467_775-777.pdf:application/pdf}
}

@article{hinsen_computational_2014,
  title = {Computational science: shifting the focus from tools to models},
  volume = {3},
  doi = {10.12688/f1000research.4263},
  timestamp = {2016-03-08T17:39:08Z},
  journal = {F1000Research},
  author = {Hinsen, Konrad},
  year = {2014},
  file = {F1000Research_3_:/Users/hinsen/Zotero/storage/Q72EDMAK/F1000Research_3_.pdf:application/pdf}
}

@article{soergel_rampant_2014,
  title = {Rampant software errors undermine scientific results},
  doi = {10.12688/f1000research.5930.1},
  timestamp = {2016-03-08T17:39:18Z},
  journal = {F1000Research},
  author = {Soergel, David A W},
  year = {2014},
  file = {F1000Research__:/Users/hinsen/Zotero/storage/VMQJDIMX/F1000Research__.pdf:application/pdf}
}

@article{naur_programming_1985,
  title = {Programming as theory building},
  volume = {15},
  issn = {0165-6074},
  doi = {10.1016/0165-6074(85)90032-8},
  abstract = {Some views on programming, taken in a wide sense and regarded as a human activity, are presented. Accepting that programs will not only have to be designed and produced, but also modified so as to cater for changing demands, it is concluded that the proper, primary aim of programming is, not to produce programs, but to have the programmers build theories of the manner in which the problems at hand are solved by program execution. The implications of such a view of programming on matters such as program life and modification, system development methods, and the professional status of programmers, are discussed.},
  timestamp = {2016-04-06T16:36:04Z},
  number = {5},
  urldate = {2016-03-31},
  journal = {Microprocessing and Microprogramming},
  author = {Naur, Peter},
  year = {1985},
  keywords = {General,General Terms,Human Factors,programming methodology,programming psychology,Theory},
  pages = {253--261},
  file = {1-s2.0-0165607485900328-main.pdf:/Users/hinsen/Zotero/storage/BXX2EGVS/1-s2.0-0165607485900328-main.pdf:application/pdf}
}

@article{peng_reproducible_2011,
  title = {Reproducible research in computational science.},
  volume = {334},
  doi = {10.1126/science.1213847},
  abstract = {Computational science has led to exciting new developments, but the nature of the work has exposed limitations in our ability to evaluate published findings. Reproducibility has the potential to serve as a minimum standard for judging scientific claims when full independent replication of a study is not possible.},
  timestamp = {2016-03-08T17:39:02Z},
  number = {6060},
  journal = {Science (New York, NY)},
  author = {Peng, Roger D},
  year = {2011},
  keywords = {reproducibility},
  pages = {1226--1227},
  file = {Science_334_1226-1227:/Users/hinsen/Zotero/storage/5VQ2V3E2/Science_334_1226-1227.pdf:application/pdf}
}

@book{_plateau_2010,
  address = {New York, NY, USA},
  title = {{{PLATEAU}} '10: {{Evaluation}} and {{Usability}} of {{Programming Languages}} and {{Tools}}},
  isbn = {978-1-4503-0547-1},
  shorttitle = {{{PLATEAU}} '10},
  abstract = {Programming languages exist to enable programmers to develop software effectively. But how efficiently programmers can write software depends on the usability of the languages and tools that they develop with. The aim of this workshop is to discuss methods, metrics and techniques for evaluating the usability of languages and language tools. The supposed benefits of such languages and tools cover a large space, including making programs easier to read, write, and maintain; allowing programmers to write more flexible and powerful programs; and restricting programs to make them more safe and secure. We plan to gather the intersection of researchers in the programming language, programming tool, and human-computer interaction communities to share their research and discuss the future of evaluation and usability of programming languages and tools. We are also interested in the input of other members of the programming research community working on related areas, such as refactoring, design patterns, program analysis, program comprehension, software visualization, end-user programming, and other programming language paradigms.},
  timestamp = {2016-04-06T07:46:50Z},
  publisher = {{ACM}},
  year = {2010}
}

@inproceedings{tobin-hochstadt_languages_2011,
  address = {New York, NY, USA},
  series = {PLDI '11},
  title = {Languages {{As Libraries}}},
  isbn = {978-1-4503-0663-8},
  doi = {10.1145/1993498.1993514},
  abstract = {Programming language design benefits from constructs for extending the syntax and semantics of a host language. While C's string-based macros empower programmers to introduce notational shorthands, the parser-level macros of Lisp encourage experimentation with domain-specific languages. The Scheme programming language improves on Lisp with macros that respect lexical scope.  The design of Racket---a descendant of Scheme---goes even further with the introduction of a full-fledged interface to the static semantics of the language. A Racket extension programmer can thus add constructs that are indistinguishable from "native" notation, large and complex embedded domain-specific languages, and even optimizing transformations for the compiler backend. This power to experiment with language design has been used to create a series of sub-languages for programming with first-class classes and modules, numerous languages for implementing the Racket system, and the creation of a complete and fully integrated typed sister language to Racket's untyped base language. This paper explains Racket's language extension API via an implementation of a small typed sister language. The new language provides a rich type system that accommodates the idioms of untyped Racket. Furthermore, modules in this typed language can safely exchange values with untyped modules. Last but not least, the implementation includes a type-based optimizer that achieves promising speedups. Although these extensions are complex, their Racket implementation is just a library, like any other library, requiring no changes to the Racket implementation.},
  timestamp = {2016-04-06T15:24:35Z},
  urldate = {2016-04-06},
  booktitle = {Proceedings of the {{32Nd ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  publisher = {{ACM}},
  author = {Tobin-Hochstadt, Sam and St-Amour, Vincent and Culpepper, Ryan and Flatt, Matthew and Felleisen, Matthias},
  year = {2011},
  keywords = {extensible languages,lisp,macros,modules,racket,typed racket},
  pages = {132--141},
  file = {pldi11-tscff.pdf:/Users/hinsen/Zotero/storage/7E3B2APG/pldi11-tscff.pdf:application/pdf}
}

@article{groth_anatomy_2010,
  title = {The anatomy of a nanopublication},
  volume = {30},
  issn = {0167-5265},
  doi = {10.3233/ISU-2010-0613},
  abstract = {Corresponding author: Jan Velterop, Concept Web Alliance, NBIC, Nijmegen, The Netherlands. E-mail: velterop@ conceptweballiance.org. As the amount of scholarly communication increases, it is increasingly difficult for specific core scientific stateme},
  timestamp = {2016-04-18T12:35:52Z},
  number = {1-2},
  urldate = {2016-04-18},
  journal = {Information Services \& Use},
  author = {Groth, Paul and Gibson, Andrew and Velterop, Jan},
  month = jan,
  year = {2010},
  pages = {51--56},
  file = {Snapshot:/Users/hinsen/Zotero/storage/HUSQIGCZ/isu613.html:;Full Text PDF:/Users/hinsen/Zotero/storage/V8Z66P32/Groth et al. - 2010 - The anatomy of a nanopublication.pdf:application/pdf}
}

@incollection{borgida_data_2004,
  series = {Lecture Notes in Computer Science},
  title = {Data {{Semantics Revisited}}},
  copyright = {\textcopyright{}2005 Springer-Verlag Berlin Heidelberg},
  isbn = {978-3-540-24576-6 978-3-540-31839-2},
  abstract = {The problem of data semantics is establishing and maintaining the correspondence between a data source and its intended subject matter. We review the long history of the problem in Databases, and contrast it with recent research on the Semantic Web. We then propose two new directions for research on the problem and sketch some open research questions.},
  language = {en},
  timestamp = {2016-04-19T10:59:00Z},
  number = {3372},
  urldate = {2016-04-19},
  booktitle = {Semantic {{Web}} and {{Databases}}},
  publisher = {{Springer Berlin Heidelberg}},
  author = {Borgida, Alexander and Mylopoulos, John},
  editor = {Bussler, Christoph and Tannen, Val and Fundulaki, Irini},
  month = aug,
  year = {2004},
  keywords = {Artificial Intelligence (incl. Robotics),Computer Science; general,Database Management,Information Storage and Retrieval,Information Systems Applications (incl. Internet),Popular Computer Science},
  pages = {9--26},
  file = {Snapshot:/Users/hinsen/Zotero/storage/7KTRG8NZ/10.html:;Borgida and Mylopoulos - 2004 - Data Semantics Revisited.pdf:/Users/hinsen/Zotero/storage/EI337W77/Borgida and Mylopoulos - 2004 - Data Semantics Revisited.pdf:application/pdf},
  doi = {10.1007/978-3-540-31839-2_2}
}

@article{brooks_no_1987,
  title = {No {{Silver Bullet}}: {{Essence}} and {{Accidents}} of {{Software Engineering}}},
  volume = {20},
  issn = {0018-9162},
  doi = {10.1109/MC.1987.1663532},
  abstract = {Not Available},
  timestamp = {2016-04-19T15:05:45Z},
  number = {4},
  journal = {Computer},
  author = {Brooks, F. P. J.},
  month = apr,
  year = {1987},
  keywords = {Computer industry,Costs,Diseases,Hardware,Industrial accidents,Project management,Roads,Silver,Software engineering,Technological innovation},
  pages = {10--19},
  file = {Brooks - 1987 - No Silver Bullet Essence and Accidents of Software.pdf:/Users/hinsen/Zotero/storage/6WM3TIKI/Brooks - 1987 - No Silver Bullet Essence and Accidents of Software.pdf:application/pdf;IEEE Xplore Abstract Record:/Users/hinsen/Zotero/storage/KVIPZBIE/articleDetails.html:}
}

@article{shotton_semantic_2009,
  title = {Semantic publishing: the coming revolution in scientific journal publishing},
  volume = {22},
  issn = {1741-4857},
  shorttitle = {Semantic publishing},
  doi = {10.1087/2009202},
  abstract = {Recent developments in Web technology can be used for semantic enhancement of scholarly journal articles, by aiding publication of data and metadata and providing `lively' interactive access to content. Such semantic enhancements are already being undertaken by leading STM publishers, and automated text processing will help these enhancements become affordable and routine. Publisher, editor, and author all have primary roles in that process; an incremental approach is needed. Publication of data and metadata to the Web make possible added-value `ecosystem services`; semantic publishing will bring substantial benefits to scholarly communication.},
  language = {en},
  timestamp = {2016-04-20T08:00:49Z},
  number = {2},
  urldate = {2016-04-20},
  journal = {Learned Publishing},
  author = {Shotton, David},
  month = apr,
  year = {2009},
  pages = {85--94},
  file = {Snapshot:/Users/hinsen/Zotero/storage/5GMA7MH7/abstract.html:;Full Text PDF:/Users/hinsen/Zotero/storage/B36NKAUB/Shotton - 2009 - Semantic publishing the coming revolution in scie.pdf:application/pdf}
}

@misc{hdf5,
  title = {Hierarchical {{Data Format}}, version 5},
  timestamp = {2016-04-21T12:42:04Z},
  howpublished = {\url{http://www.hdfgroup.org/HDF5/}},
  author = {{The HDF Group}},
  year = {1997-2016}
}

@misc{regehr_guide_2010,
  title = {A {{Guide}} to {{Undefined Behavior}} in {{C}} and {{C}}++},
  timestamp = {2016-04-20T13:14:57Z},
  urldate = {2016-04-20},
  howpublished = {\url{http://blog.regehr.org/archives/213}},
  author = {Regehr, John},
  month = jul,
  year = {2010},
  keywords = {C,c++},
  file = {A Guide to Undefined Behavior in C and C++, Part 1 – Embedded in Academia:/Users/hinsen/Zotero/storage/NI75I28H/213.html:;A Guide to Undefined Behavior in C and C++, Part 3 – Embedded in Academia:/Users/hinsen/Zotero/storage/PENR5FDH/232.html:;A Guide to Undefined Behavior in C and C++, Part 2 – Embedded in Academia:/Users/hinsen/Zotero/storage/SMA3RWUT/226.html:}
}

@misc{_extensible_1998,
  title = {Extensible {{Markup Language}} ({{XML}})},
  timestamp = {2016-04-21T12:45:36Z},
  urldate = {2016-04-21},
  howpublished = {\url{https://www.w3.org/XML/}},
  year = {1998-2016},
  file = {Extensible Markup Language (XML):/Users/hinsen/Zotero/storage/VASNWVZV/XML.html:}
}

@misc{_community_1983,
  title = {Community {{Earth System Model}}},
  timestamp = {2016-04-21T12:50:03Z},
  urldate = {2016-04-21},
  howpublished = {\url{https://www2.cesm.ucar.edu/}},
  year = {1983-2016}
}

@article{fousse_mpfr_2007,
  title = {{{MPFR}}: {{A Multiple}}-precision {{Binary Floating}}-point {{Library}} with {{Correct Rounding}}},
  volume = {33},
  issn = {0098-3500},
  shorttitle = {{{MPFR}}},
  doi = {10.1145/1236463.1236468},
  abstract = {This article presents a multiple-precision binary floating-point library, written in the ISO C language, and based on the GNU MP library. Its particularity is to extend to arbitrary-precision, ideas from the IEEE 754 standard, by providing correct rounding and exceptions. We demonstrate how these strong semantics are achieved---with no significant slowdown with respect to other arbitrary-precision tools---and discuss a few applications where such a library can be useful.},
  timestamp = {2016-04-21T12:53:21Z},
  number = {2},
  urldate = {2016-04-21},
  journal = {ACM Trans. Math. Softw.},
  author = {Fousse, Laurent and Hanrot, Guillaume and Lef{\`e}vre, Vincent and P{\'e}lissier, Patrick and Zimmermann, Paul},
  month = jun,
  year = {2007},
  keywords = {correct rounding,elementary function,floating-point arithmetic,IEEE 754 standard,Multiple-precision arithmetic,portable software},
  file = {RR-5753.pdf:/Users/hinsen/Zotero/storage/4T2ZN9D2/RR-5753.pdf:application/pdf}
}

@article{alnaes_fenics_2015,
  title = {The {{FEniCS Project Version}} 1.5},
  volume = {3},
  copyright = {Copyright (c) 2015 Archive of Numerical Software},
  issn = {2197-8263},
  doi = {10.11588/ans.2015.100.20553},
  abstract = {The FEniCS Project is a collaborative project for the development of innovative concepts and tools for automated scientific computing, with a particular focus on the solution of differential equations by finite element methods. The FEniCS Projects software consists of a collection of interoperable software components, including DOLFIN, FFC, FIAT, Instant, UFC, UFL, and mshr. This note describes the new features and changes introduced in the release of FEniCS version 1.5.},
  language = {en},
  timestamp = {2016-04-21T12:56:15Z},
  number = {100},
  urldate = {2016-04-21},
  journal = {Archive of Numerical Software},
  author = {Aln\ae{}s, Martin and Blechta, Jan and Hake, Johan and Johansson, August and Kehlet, Benjamin and Logg, Anders and Richardson, Chris and Ring, Johannes and Rognes, Marie E. and Wells, Garth N.},
  month = dec,
  year = {2015},
  file = {Snapshot:/Users/hinsen/Zotero/storage/IZA24IWA/20553.html:;Full Text PDF:/Users/hinsen/Zotero/storage/XPS6XX9V/Alnæs et al. - 2015 - The FEniCS Project Version 1.5.pdf:application/pdf}
}

@article{_ieee_2008,
  title = {{{IEEE Standard}} for {{Floating-Point Arithmetic}}},
  doi = {10.1109/IEEESTD.2008.4610935},
  abstract = {This standard specifies interchange and arithmetic formats and methods for binary and decimal floating-point arithmetic in computer programming environments. This standard specifies exception conditions and their default handling. An implementation of a floating-point system conforming to this standard may be realized entirely in software, entirely in hardware, or in any combination of software and hardware. For operations specified in the normative part of this standard, numerical results and exceptions are uniquely determined by the values of the input data, sequence of operations, and destination formats, all under user control.},
  timestamp = {2016-04-21T12:59:03Z},
  journal = {IEEE Std 754-2008},
  month = aug,
  year = {2008},
  keywords = {754-2008,arithmetic,arithmetic formats,binary,computer,computer programming,decimal,decimal floating-point arithmetic,exponent,floating-point,floating point arithmetic,format,IEEE standard,IEEE standards,interchange,NaN,number,programming,rounding,significand,subnormal},
  pages = {1--70},
  file = {IEEE Xplore Abstract Record:/Users/hinsen/Zotero/storage/AH7FGPN8/articleDetails.html:}
}

@misc{_unicode_2015,
  title = {Unicode 8.0.0},
  timestamp = {2016-04-21T13:02:42Z},
  urldate = {2016-04-21},
  howpublished = {\url{http://www.unicode.org/versions/Unicode8.0.0/}},
  month = jun,
  year = {2015}
}

@misc{_iso/iec_2011,
  title = {{{ISO}}/{{IEC}} 9899:2011 - {{Information}} technology -- {{Programming}} languages -- {{C}}},
  timestamp = {2016-04-21T13:05:18Z},
  urldate = {2016-04-21},
  howpublished = {\url{http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=57853}},
  year = {2011},
  file = {ISO/IEC 9899\:2011 - Information technology -- Programming languages -- C:/Users/hinsen/Zotero/storage/95NAFP2J/catalogue_detail.html:}
}

@misc{wwpdb_atomic_2011,
  title = {Atomic {{Coordinate Entry Format Version}} 3.3},
  timestamp = {2016-04-21T13:07:28Z},
  urldate = {2016-04-21},
  howpublished = {\url{http://www.wwpdb.org/documentation/file-format-content/format33/v3.3.html}},
  author = {wwPDB},
  month = jul,
  year = {2011}
}

@techreport{plt-tr1,
  title = {Reference: {{Racket}}},
  timestamp = {2016-04-21T13:09:29Z},
  number = {PLT-TR-2010-1},
  institution = {PLT Design Inc.},
  author = {Flatt, Matthew and {PLT}},
  year = {2010},
  note = {https://racket-lang.org/tr1/}
}

@misc{openmath_society_openmath_2000,
  title = {{{OpenMath}}},
  timestamp = {2016-04-21T14:37:48Z},
  urldate = {2016-04-21},
  howpublished = {\url{http://www.openmath.org/index.html}},
  author = {{OpenMath society}},
  year = {2000-2013}
}

@article{hinsen_pymosaic_2014,
  title = {{{pyMosaic}} 0.3.1},
  doi = {10.5281/zenodo.11648},
  timestamp = {2016-04-27T14:41:43Z},
  urldate = {2016-04-21},
  author = {Hinsen, Konrad},
  year = {2014}
}

@article{benet_ipfs_2014,
  title = {{{IPFS}} - {{Content Addressed}}, {{Versioned}}, {{P2P File System}}},
  abstract = {The InterPlanetary File System (IPFS) is a peer-to-peer distributed file system that seeks to connect all computing devices with the same system of files. In some ways, IPFS is similar to the Web, but IPFS could be seen as a single BitTorrent swarm, exchanging objects within one Git repository. In other words, IPFS provides a high throughput content-addressed block storage model, with content-addressed hyper links. This forms a generalized Merkle DAG, a data structure upon which one can build versioned file systems, blockchains, and even a Permanent Web. IPFS combines a distributed hashtable, an incentivized block exchange, and a self-certifying namespace. IPFS has no single point of failure, and nodes do not need to trust each other.},
  timestamp = {2016-04-26T07:18:46Z},
  archivePrefix = {arXiv},
  eprinttype = {arxiv},
  eprint = {1407.3561},
  primaryClass = {cs},
  urldate = {2016-04-26},
  journal = {arXiv:1407.3561 [cs]},
  author = {Benet, Juan},
  month = jul,
  year = {2014},
  keywords = {Computer Science - Distributed; Parallel; and Cluster Computing,Computer Science - Networking and Internet Architecture},
  file = {arXiv.org Snapshot:/Users/hinsen/Zotero/storage/I6DV63W8/1407.html:;arXiv\:1407.3561 PDF:/Users/hinsen/Zotero/storage/K49WJV2K/Benet - 2014 - IPFS - Content Addressed, Versioned, P2P File Syst.pdf:application/pdf}
}

@misc{_history_2016,
  title = {History of mathematical notation},
  copyright = {Creative Commons Attribution-ShareAlike License},
  abstract = {The history of mathematical notation includes the commencement, progress, and cultural diffusion of mathematical symbols and the conflict of the methods of notation confronted in a notation's move to popularity or inconspicuousness. Mathematical notation comprises the symbols used to write mathematical equations and formulas. Notation generally implies a set of well-defined representations of quantities and symbols operators. The history includes Hindu-Arabic numerals, letters from the Roman, Greek, Hebrew, and German alphabets, and a host of symbols invented by mathematicians over the past several centuries.
The development of mathematical notation can be divided in stages. The "rhetorical" stage is where calculations are performed by words and no symbols are used. The "syncopated" stage is where frequently used operations and quantities are represented by symbolic syntactical abbreviations. From ancient times through the post-classical age, bursts of mathematical creativity were often followed by centuries of stagnation. As the early modern age opened and the worldwide spread of knowledge began, written examples of mathematical developments came to light. The "symbolic" stage is where comprehensive systems of notation supersede rhetoric. Beginning in Italy in the 16th century, new mathematical developments, interacting with new scientific discoveries, were made at an increasing pace that continues through the present day. This symbolic system was in use by medieval Indian mathematicians and in Europe since the middle of the 17th century, and has continued to develop in the contemporary era.
The area of study known as the history of mathematics is primarily an investigation into the origin of discoveries in mathematics and, the focus here, the investigation into the mathematical methods and notation of the past.},
  language = {en},
  timestamp = {2016-04-25T08:15:20Z},
  urldate = {2016-04-25},
  journal = {Wikipedia, the free encyclopedia},
  month = apr,
  year = {2016},
  note = {Page Version ID: 714899577},
  file = {Snapshot:/Users/hinsen/Zotero/storage/326IWIND/index.html:}
}


